<?xml version="1.0" encoding="utf-8"?>
<mx:VBox xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 width="100%" height="100%"
		 creationComplete="on_creation_complete(event)" xmlns:renderers="renderers.*" xmlns:controls="controls.*"
>
<fx:Script>
<![CDATA[
import controls.ObjectEx;

import mx.collections.ArrayCollection;
import mx.core.UIComponent;
import mx.events.CloseEvent;
import mx.events.FlexEvent;
import mx.events.ListEvent;
import mx.utils.ObjectProxy;

import renderers.DeptEditItemRenderer;
	
[Bindable] private var dp:ArrayCollection;;	
[Bindable] public var engine:Engine = Engine.engine;	
	
protected function on_creation_complete(event:FlexEvent):void
{
//	dp = Engine.engine.departments_ac;
	reset_dp();
}

protected function reset_dp():void
{
	dp = new ArrayCollection();
	clone_array_collection(engine.departments_ac, dp);
	dp.addItem(new Department(-1, ""));	
}
	
public static function clone_array_collection(src:ArrayCollection, dst:ArrayCollection):void	
{
	for (var i:int = 0; i < src.length; i++) {	
		dst.addItem(src[i]);
	}
}
	
private var current_index:int = -1;
	

//protected function list_changeHandler(e:ListEvent):void
//{
//	callLater(list_change);	
//}
	
	
protected function on_list_change(e:ListEvent = null):void
{
	var index:int = list.selectedIndex;
	
	var item:DeptEditItemRenderer = list.indexToItemRenderer(index) as DeptEditItemRenderer;
	var current_item:DeptEditItemRenderer = list.indexToItemRenderer(current_index) as DeptEditItemRenderer;
	
	
	if (item != current_item) {
		if (current_item != null) {
			current_item.f_selected = false;
			current_item.invalidateDisplayList();
		}
		
		current_item = item;
	}

	if (current_item != null) {
		current_item.f_selected = true;
		current_item.invalidateDisplayList();
	}
	
	
	current_index = index;
//	item.inp_name.text += "*";
	
}

protected function list_keyDownHandler(event:KeyboardEvent):void
{
	if (event.keyCode == Keyboard.ENTER) {
		list.scrollToIndex(list.selectedIndex);
		var item:DeptEditItemRenderer = list.indexToItemRenderer(list.selectedIndex) as DeptEditItemRenderer;	
		if (item != null) {  
			item.inp_name.setFocus();
		}
	}
}                                        


protected function cmd_discard(f_restore:Boolean = true):void
{
	var pi:int = list.selectedIndex;
	list.selectedIndex = -1;
	on_list_change();	
	
	var engine:Engine = Engine.engine;
	
	while (changer._ > 0) {	
	for (var k:String in changer) {
		var id:int = int(k);
		//if (id <= 0) continue;
		if (id >= 0 && changer[id].value != null) {
			var index:* = engine.departments_index[id];
			if (index != null && f_restore) {
				engine.departments[index].DeptName = changer[id].value;
			}
		}
		
		delete changer[k];
		changer._--;
	}}

	
	
	// Item renderers
	for (var i:int = dp.length - 1; i >= 0; i--) {
		var dept:Department = dp.getItemAt(i) as Department;
		if (dept.DeptID < 0) { // new items
			dp.removeItemAt(i);
		}
		
		
		var item:DeptEditItemRenderer = list.indexToItemRenderer(i) as DeptEditItemRenderer;
		if (item == null) continue;
		if (item.changer != null) {
			item.changer = null;
			item.invalidateDisplayList();
		}
	}

	dp.addItem(new Department(new_item_id = -1, ""));

	
	callLater(set_selected_index, [pi]);	
}

protected var new_item_id:int = -1;	
	
	
public function delete_item(id:int):void
{
	if (id >= 0) {
		return;
	}
	
	var pi:int = list.selectedIndex;
	list.selectedIndex = -1;
	on_list_change();	
	
	for (var i:int = dp.length - 1; i >= 0; i--) {
		var dept:Department = dp.getItemAt(i) as Department;		
		if (dept.DeptID == id) {
			dp.removeItemAt(pi = i);
			
			if (changer[id] != null) {
				delete changer[id];				
				changer._--;
			}
			break;
		}
	}
	
	add_new_item();
	callLater(set_selected_index, [pi]);
}
	
public function set_selected_index(i:int):void
{
	if (i >= dp.length) i = dp.length - 1;
	list.selectedIndex = i;
	on_list_change();
	list.scrollToIndex(i);
	list.setFocus();
}
	
public function add_new_item():void
{
	for (var i:int = dp.length - 1; i >= 0; i--) {
		var dept:Department = dp.getItemAt(i) as Department;		
		if (dept.DeptID < 0 && dept.DeptName == "") return;
		if (dept.DeptID >= 0) {
			dp.addItem(new Department(--new_item_id, ""));
			return;
		}
		
	}
}
	
	
[Bindable] protected var changer:ObjectEx = new ObjectEx();//new ObjectProxy();	
[Bindable] protected var user_data:Object = { changer: changer, papa: this };
[Bindable] protected var f_apply:Boolean = false;
	
	
	
protected function cmd_apply():void
{
	f_apply = true;
	engine.apply_departments_changes(dp.source, changer, apply_done);
	
}
	
protected function apply_done():void	
{
	f_apply = false;

//	changer = new ObjectEx();	
	cmd_discard(false);
//	dp = null;
	
//	callLater(Engine.engine.query_departments, [query_departments_done]);	
	engine.query_departments(query_departments_done);	
}
	
protected function query_departments_done():void
{
	reset_dp();	
}

protected function on_btn_close_click(event:MouseEvent):void
{
	dispatchEvent(new CloseEvent(CloseEvent.CLOSE, true));
	
}
	
]]>
</fx:Script>

<mx:HBox width="100%" height="100%">
	
<mx:VBox width="100%" height="100%">
	<controls:ListEx id="list" width="100%" height="100%" dataProvider="{dp}" labelField="DeptName" itemRenderer="renderers.DeptEditItemRenderer" change="on_list_change(event)" user_data="{user_data}" keyDown="list_keyDownHandler(event)"/>	
</mx:VBox>
	
</mx:HBox>

<mx:HBox width="100%" horizontalAlign="right">
	<s:Button id="btn_apply" label="Применить" enabled="{!f_apply &amp;&amp; changer._ != 0 }" click="{cmd_apply()}"  />	
	<s:Button id="btn_discard" label="Сбросить" enabled="{!f_apply &amp;&amp; changer._ != 0}" click="{cmd_discard()}" />
	<s:Button id="btn_close" label="Закрыть" enabled="{!f_apply &amp;&amp; changer._  == 0}" click="on_btn_close_click(event)" />
</mx:HBox>	
	
	
	
<fx:Declarations>
</fx:Declarations>
</mx:VBox>
