<?xml version="1.0" encoding="utf-8"?>
<mx:HBox  xmlns:fx="http://ns.adobe.com/mxml/2009" 
		  xmlns:s="library://ns.adobe.com/flex/spark" 
		  xmlns:mx="library://ns.adobe.com/flex/mx" 
		  implements="mx.controls.listClasses.IDropInListItemRenderer"
		  width="100%" verticalAlign="middle" paddingLeft="8" paddingRight="8"
		  horizontalScrollPolicy="off" verticalScrollPolicy="off"
		  creationComplete="on_creation_complete(event)"
		  minHeight="16"
		  horizontalGap="0"
>
<fx:Script>

<![CDATA[
	import controls.DataGridEx;
	import controls.ListEx;
	
	import mx.collections.ArrayCollection;
	import mx.controls.List;
	import mx.controls.dataGridClasses.DataGridListData;
	import mx.controls.listClasses.BaseListData;
	import mx.controls.listClasses.ListBase;
	import mx.core.UIComponent;
	import mx.events.FlexEvent;
	import mx.events.ResizeEvent;
	import mx.utils.StringUtil;
	
	import spark.components.DataGrid;

protected var _listData:BaseListData;

[Bindable] public var f_selected:Boolean = false;
public var f_text_inp_focused:Boolean = false;
	
//[Bindable] public var f_deleted:Boolean = false;	

	
[Bindable] public var changer:String;	
	
[Bindable("dataChange")]	
public  function get listData():BaseListData
{
	return _listData;
}

public function set listData(value:BaseListData):void
{
	_listData = value;
}	

[Bindable("dataChange")]	
public override function get data():Object
{
	return super.data;
}

public override function set data(value:Object):void
{
//	if (super.data == value) return;
	
	super.data = value;
	ini_changer();

	if (!f_text_inp_focused) {
		changer = null;
		inp.text = get_value();
	}
}

protected function get_papa():Object
{
	return _listData != null ? (_listData.owner as DataGridEx).user_data.papa : null;
}
	
protected function get_fn():String	
{
	return _listData != null ? (_listData as DataGridListData).dataField : null;
}
	
protected function get_value():String
{
	if (data == null || _listData == null) return "";
	return data[(_listData as DataGridListData).dataField];
}

	
protected function set_value(s:String):void
{
	if (data == null || _listData == null) return;
	data[(_listData as DataGridListData).dataField] = s;
}
	
	

protected function get_id():int
{
	if (data == null || _listData == null) return -1;
//	return data.EmplID;
	return (data as Employee).EmplID;
}

	
	
	

	
	
	
protected function ini_changer():void
{
	if (_listData == null || data == null) {
		return;
	}
	
	var list:ListBase = _listData.owner as ListBase;	
//	var id:int = data.DeptID;

	f_selected = (list.dataProvider as ArrayCollection).getItemIndex(data) == list.selectedIndex;	
}
	
protected function focus_to_list():void	
{
	if (_listData != null && (_listData.owner is UIComponent)) {
		(_listData.owner as UIComponent).setFocus();
	}
}
	
	
protected function on_creation_complete(event:FlexEvent):void
{
}
	
protected function foc_out():void
{
//	removeChild(inp_name);
//	addChildAt(lbl_name, numChildren);
	invalidateDisplayList();
	focus_to_list();
	
}

protected function inp_enterHandler(event:FlexEvent):void
{
	callLater(foc_out);
}
	
protected function inp_keyDownHandler(e:KeyboardEvent):void
{
	if (e.ctrlKey) {
	switch (e.keyCode) {
		case Keyboard.A:
		case Keyboard.X:
		case Keyboard.C:		
		case Keyboard.V:
			return;
	}}
	
	
	
	e.stopPropagation();		

	
	switch (e.keyCode) {
		case Keyboard.UP:
		case Keyboard.DOWN:
		case Keyboard.PAGE_UP:		
		case Keyboard.PAGE_DOWN:		
		case Keyboard.TAB:
			e.preventDefault();			
//			event.stopPropagation(); // ПРОВАЛИВАЕМСЯ ДАЛЬШЕ В "case"
//			return;			
		case Keyboard.HOME:
		case Keyboard.END:
//			event.stopPropagation();
			return;
			
		case Keyboard.ESCAPE:
			revert();
			focus_to_list();			
			return;
	}
	
	
	
	
}

	
protected function inp_focusInHandler(event:FocusEvent):void
{
	f_text_inp_focused = true;
	
	inp.setStyle("contentBackgroundAlpha", 1);

//	var id:int = data.DeptID;
//	var name:String = data.DeptName;
	

	inp.text = get_value();


}
	
protected function inp_focusOutHandler(event:FocusEvent):void
{
	f_text_inp_focused = false;
	
	inp.setStyle("contentBackgroundAlpha", 0);
	inp.horizontalScrollPosition = 0;

	var text:String = StringUtil.trim(inp.text);
	
	set_value(inp.text = text);
	
	if (changer != null) {
		change_item();
		changer = null;
	}
	
	set_text_input_color();

}

protected function change_item():void
{
	if (get_papa() != null) {
		get_papa().change_item(get_id(), get_fn(), inp.text);		
	}
	
}
	
protected function set_text_input_color():void
{
	if (data == null) return;
	
//	var id:int = data.DeptID;
//	var name:String = get_value();	

//	inp.setStyle("color", (f_text_inp_focused || id >= 0) ? 0x000000 : (name == "" ? 0x808080 : 0x000000 )  );	
}	
	
override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void
{
	super.updateDisplayList(unscaledWidth, unscaledHeight);
}


	
	
protected function revert():void	
{
	if (changer != null) {
		set_value(inp.text = changer);
		changer = null;
	}
	

}

protected function inp_changeHandler(event:Event):void
{

	var text:String = StringUtil.trim(inp.text);
	if (text == get_value()) return;
	
	if (changer == null) {
		changer = get_value();
		set_value(text);
		return;
	}

	set_value(text);	
	
	if (changer != null && changer == text) {
		changer = null;
		return;
	}
}

	
]]>
</fx:Script>

	
	

<mx:TextInput id="inp" text="" width="100%" editable="true" borderVisible="false" contentBackgroundAlpha="0" 
			  enter="inp_enterHandler(event)" change="inp_changeHandler(event)" 
			  focusIn="inp_focusInHandler(event)" focusOut="inp_focusOutHandler(event)" 
			  keyDown="inp_keyDownHandler(event)" 
			  

/>



	
<fx:Declarations>

</fx:Declarations>
</mx:HBox>
